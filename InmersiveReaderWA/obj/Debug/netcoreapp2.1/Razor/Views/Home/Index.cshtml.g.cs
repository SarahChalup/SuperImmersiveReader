#pragma checksum "C:\Users\HP\source\repos\InmersiveReaderWA\InmersiveReaderWA\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "14d1fed9817b7917f6151179bc24e2be101af54a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\HP\source\repos\InmersiveReaderWA\InmersiveReaderWA\Views\_ViewImports.cshtml"
using InmersiveReaderWA;

#line default
#line hidden
#line 2 "C:\Users\HP\source\repos\InmersiveReaderWA\InmersiveReaderWA\Views\_ViewImports.cshtml"
using InmersiveReaderWA.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"14d1fed9817b7917f6151179bc24e2be101af54a", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6764a58a53ffa0ba71889f36fd3c3c350db98ef6", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\HP\source\repos\InmersiveReaderWA\InmersiveReaderWA\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Immersive Reader C# Quickstart";

#line default
#line hidden
            BeginContext(66, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("Styles", async() => {
                BeginContext(85, 225, true);
                WriteLiteral("\r\n    <style type=\"text/css\">\r\n        .immersive-reader-button {\r\n            background-color: white;\r\n            margin-top: 5px;\r\n            border: 1px solid black;\r\n            float: right;\r\n        }\r\n    </style>\r\n");
                EndContext();
            }
            );
            BeginContext(313, 3258, true);
            WriteLiteral(@"
<div class=""container"">
    <button class=""immersive-reader-button"" data-button-style=""iconAndText"" data-locale=""en""></button>

    <h1 id=""ir-title"">El león y el Mosquito</h1>
    <div id=""ir-content"" lang=""en-us"">
        <p>
            Estaba un día el grande y fiero león, considerado por todos el rey de los animales, dormitando sobre la hierba seca de la sabana. Todo estaba tranquilo y sólo se oía de vez en cuando el canto de algunos pájaros o el gritito agudo de algún mono.
            De repente, esa paz se rompió. Un mosquito se acercó al soñoliento  león y comenzó a darle la tabarra.
            <ul>
                <li>
                    ¡Eh, tú! Todo el mundo dice que eres el rey de todo esto, pero yo no acabo de creérmelo  – dijo el mosquito provocando al gran felino.
                </li>
                <li>
                    ¿Y para decirme eso te atreves a despertarme? – rugió el león – Si todos me consideran el rey,  por algo será  ¡Y ahora, vete de aquí!
                <");
            WriteLiteral(@"/li>
                <li>
                    ¡No! – repitió el mosquito con chulería – ¡Yo soy mucho más fuerte que tú!
                </li>
                <li>
                    ¡Te he dicho que no me molestes! – repitió el león empezando a enfadarse seriamente –  ¡No digas tonterías!
                </li>
                <li>
                    ¿Tonterías? ¡Pues ahora verás que soy capaz de vencerte! – chilló el insecto con insolencia.
                </li>

            </ul>
            El león, estupefacto, vio cómo  el mosquito comenzaba a zumbar sobre él y a propinarle un picotazo tras otro. El pobre felino se vio sin escapatoria. Intentaba zafarse como podía y se revolvía sobre sí mismo para evitar los pinchazos, pero el mosquito era tan rápido que no le daba opción alguna. Al indefenso león le picaba tanto el cuerpo que se arañó con sus propias garras la cara y el pecho. Finalmente, se rindió.
            <ul>
                <li>
                    ¿Ves? ¡Soy más fuerte que tú! ");
            WriteLiteral(@"– se jactó el repelente mosquito.
                </li>
            </ul>
            Loco de alegría,  empezó a bailar delante del león y a hablarle de manera burlona.
            <ul>
                <li>
                    Ja ja ja! ¡Te he ganado! ¿Qué pensarán los demás cuando sepan que un animalito tan pequeño como yo ha conseguido derrotarte? ¡Ja ja ja!

                </li>
            </ul>
           
            En uno de sus absurdos giros, tropezó con una tela de araña y, de repente,  se hizo el silencio. Cayó en la cuenta de que estaba atrapado sin posibilidad de salvarse y en décimas de segundo  se le bajaron los humos. Suspiró y dijo con amargura:
            <ul>
                <li>
                    Vaya, vaya, vaya… He vencido a un animal poderoso, pero al final, otro mucho más insignificante me ha vencido a mí.

                </li>
            </ul>
            
        </p>
        <h3>
            Moraleja:     </h3>
        <p>
            no te creas nunca ");
            WriteLiteral("el mejor en todo. Es bueno tener éxitos en la vida y hay que alegrarse por ellos, pero no seas arrogante y pienses que los demás son menos que tú.\r\n\r\n        </p>\r\n    </div>\r\n</div>\r\n\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(3590, 309, true);
                WriteLiteral(@"
    <script src=""https://contentstorage.onenote.office.net/onenoteltir/immersivereadersdk/immersive-reader-sdk.1.0.0.js""></script>
    <script>
        function getTokenAndSubdomainAsync() {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: """);
                EndContext();
                BeginContext(3900, 42, false);
#line 81 "C:\Users\HP\source\repos\InmersiveReaderWA\InmersiveReaderWA\Views\Home\Index.cshtml"
                     Write(Url.Action("GetTokenAndSubdomain", "Home"));

#line default
#line hidden
                EndContext();
                BeginContext(3942, 2325, true);
                WriteLiteral(@""",
                    type: ""GET"",
                    success: function (data) {
                        if (data.error) {
                            reject(data.error);
                        } else {
                            resolve(data);
                        }
                    },
                    error: function (err) {
                        reject(err);
                    }
                });
            });
        }

        $("".immersive-reader-button"").click(function () {
            handleLaunchImmersiveReader();
        });

        function handleLaunchImmersiveReader() {
            getTokenAndSubdomainAsync()
                .then(function (response) {
                    const token = response[""token""];
                    const subdomain = response[""subdomain""];

                    // Learn more about chunk usage and supported MIME types https://docs.microsoft.com/en-us/azure/cognitive-services/immersive-reader/reference#chunk
                   ");
                WriteLiteral(@" const data = {
                        title: $(""#ir-title"").text(),
                        chunks: [{
                            content: $(""#ir-content"").html(),
                            mimeType: ""text/html""
                        }]
                    };

                    // Learn more about options https://docs.microsoft.com/en-us/azure/cognitive-services/immersive-reader/reference#options
                    const options = {
                        ""onExit"": exitCallback,
                        ""uiZIndex"": 2000
                    };

                    ImmersiveReader.launchAsync(token, subdomain, data, options)
                        .catch(function (error) {
                            alert(""Error in launching the Immersive Reader. Check the console."");
                            console.log(error);
                        });
                })
                .catch(function (error) {
                    alert(""Error in getting the Immersive Reader token and su");
                WriteLiteral(@"bdomain. Check the console."");
                    console.log(error);
                });
        }

        function exitCallback() {
            console.log(""This is the callback function. It is executed when the Immersive Reader closes."");
        }
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
